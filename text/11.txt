before we get to the nitty-gritty of doing speech recognition in Python let's take a moment to talk about how speech recognition works
a full discussion would fill a book so I won't bore you with all the technical details here
in fact this section is not a prerequisite to the rest of the tutorial
if you'd like to get straight to the point then feel free to skip ahead
speech recognition has its roots in research than at Bell labs in the early 1950s
early systems were limited to a single speaker and has limited vocabulary of about a dozen words
modern speech recognition systems have come a long way since their ancient counterparts
they can recognize speech from multiple speakers and have enormous vocabularies and numerous languages
the first component of speech recognition is of course switch switch must be converted from physical sound to an electrical signal with a microphone then to a Digital Data with analog to digital converter
once they decide Sarah models can be used to transcribe the audio to text
most modern speech recognition systems rely on what is known as a hidden Markov model
this approach works on the assumption that a speech signal when viewed on a short enough time scale can be reasonably approximated as a stationary process that is a process in which statistical property do not change over time
in a typical a Markov model to speed signal is divided into 10 millisecond fragments
the power spectrum of each fragment which is essentially apart of the signals power as a function of frequency is map to Vector of real numbers known as cepstral coefficients
the dimension of this Vector is usually small sometimes as low as 10 although more actors who since May had the mention 32 or more
the final output of the Hidden Markov model is a sequence of vectors
to decode the speech into text groups of vectors are matched to one or more phonemes a fundamental unit of speech
this calculation requires training sent the sound of a phoneme varies from speaker to speaker and Vary from one utterance to another by the same speaker
a special algorithm is then applied to determine the most likely words that produce the given sequence of phonemes
one can imagine that this whole process may be computationally expensive
in many modern speech recognition systems neural networks are used to simplify the speed signal using techniques for feature transformation and dementia ality reduction before hidden Markov model recognition
voice activity detectors are also used to reduce audio signal to only the portions that are likely to contain speech
this prevents the recognizer from wasting time analyzing unnecessary parts of the signal
fortunately as a python programmer you don't have to worry about this
a number is speech recognition services are available for you online through an API and many of these services offer python sdks
