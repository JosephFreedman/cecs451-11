before we get into the nitty-gritty of doing speech recognition and python let's take a moment to talk about how speech recognition works
for discussion would fill a book so I won't bore you with all the technical details here
in fact the section is not prerequisite to the rest of the tutorials
if you'd like to get straight to the point then feel free to skip ahead
speech recognition has its roots in research done at Bell labs in the early 1950s
early systems were limited to a single speaker and have limited vocabulary of about a dozen words
modern speech recognition systems have come a long way since their ancient counterparts
they can recognize speech from multiple speakers and have enormous vocabularies in numerous languages
the first component of speech recognition is of course the speech speech must be converted from physical sound to an electrical signal with the microphone and that's a Digital Data with an analog to digital converter
once digitized several models can be used to transfer at the audio to text
most modern speech recognition systems rely on what is known as the hidden Markov model
this approach works on the assumption that is Beach signal when viewed on the short end of time skill can be reasonably approximated as a stationary process that is a process in which the physical properties do not change over time
in the typical hidden Markov model to speed signal is divided into 10 millisecond fragments
power spectrum of each fragment which is essentially a plot of the signal Tower as a function of frequency is not to a vector of real numbers known as sexual coefficients
the dimension of this Vector is usually small sometimes as low as 10 although more accurate systems may have Dimension 32 or more
the final output of the Hidden Markov model is a sequence of these vectors
to decode the speech into text groups of vectors are matched to one or more phonemes a fundamental unit of speech
this calculation requires training since the sound of a phony varies from speaker to speaker and even berries from utterance to another by the same speaker
a special algorithm is then applied to determine the most likely words that produce given sequence of phonemes
one can imagine that this whole process may be computationally expensive
in many modern speech recognition systems neural networks are used to simplify the speech signal using techniques for feature transformation and dimensionality reduction through hidden Markov model recognition
voice activity detectors are also used to reduce an audio signal only to the proportions that are likely to contain speech
this prevents the recognizer from wasting time analyzing unnecessary parts of the signal
fortunately as a python programmer you don't have to worry about any of this
the number of speech recognition services are available for use online through an API and many of these services offer python SD case
