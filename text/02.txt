before we get to the nitty-gritty of doing speech recognition and python let's take a moment to talk about how speech recognition works
a full discussion would fill a book so I won't bore you with all of the technical details here
in fact the section is not prerequisite to the rest of the tutorial
if you'd like to get straight to the point then feel free to skip ahead
speech recognition has its roots in research done at Bell labs in the early 1950s
early systems are limited to a single speaker and have limited vocabularies of about a dozen words
modern speech recognition systems have come a long way since their ancient counterparts
they can recognize speech from multiple speakers and have enormous vocabularies and numerous languages
the first component of speech recognition is of course speech speech must be converted from physical sound to an electrical signal with a microphone and then to Digital Data with an analog to digital converter
once digitized server models can be used to transcribe the audio to text
most modern speech recognition systems rely on what is known as a hidden Markov model
this approach works on the assumption that a speech signal when viewed on a short enough time scale can be reasonably approximated as a stationary process that is a process in which statistical properties do not change over time
in a typical hidden Markov model the speech signal is divided into 10 millisecond fragments
the power of spectrum of each fragment which is essentially a plot of the signals power as a function of frequency is mops and factor of real numbers known as sub stroke coefficients
the dimension of this factor is usually small sometimes as well with 10 although more accurate systems may have Dimensions 32 or more
the final output of the Hidden Markov model is a sequence of these factors
to decode the speech into text groups of factors are matched to one or more phonemes a fundamental unit of speech
this calculation class training since the sound of a phoneme varies from speaker to speaker and even fairies from one of my turns to one another by the same speaker
special algorithm is better pie to determine the most likely words that produce the given sequence of phonies
one can imagine that this whole process may be computationally expensive
in many modern speech recognition systems neural networks are used to simplify the speech signal using techniques for feature transformation and dimensionality reduction before hidden Markov model recognition
police activity detectors are also used to reduce an audio signal only the portions that are likely to contain speech
this prevents the recognizer from wasting time analyzing unnecessary parts of the signal
fortunately as a python programmer you don't have to worry about any of this
a number of speech recognition services are available for use online through an API and money of the services offer python sdks
